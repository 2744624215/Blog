<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Node介绍]]></title>
    <url>%2F2016%2F11%2F09%2Fangular%E7%AC%AC%E4%B8%80%E5%A4%A9%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[1.Node环境1.1.什么是Node Node.js 可能类似jquery.js 不是JS文件，也不是一个JS框架（） 而是Server side Javascript runtime, 服务端的一个JS运行时 我们可以在NODE运行JS代码 alert();ECMAScript JS- ES BOM DOM node中只能运行ECMAScript，无法使用 BOM 和 DOM 目前我们的JS是运行在浏览器内核中 PHP是什么？是一门脚本语言也是一个运行环境 为什么Node选中了JS， 说到底就是一个JS运行环境 目前有两个分支 Node.js 0.12.7 官方版本 要求尽善尽美 IO.js 是社区的产物，不是官方的东西，io.js有很多新特性，迭代非常快，社区推进非常快 15年两者合并，发布node第一个正式版 4.0， 迭代速度又慢了 node 5.x == io.js node 4.0 == node 1.2.Node环境搭建1.2.1.Mac- 安装包的方式 + [pkg](https://nodejs.org/dist/v5.5.0/node-v5.5.0.pkg) - NVM（Node Version Manager） 1234$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash$ echo '. ~/.nvm/nvm.sh' &gt;&gt; .bash_profile$ nvm install stable$ nvm alias default stable 1.2.2.Windows- 安装包的方式 + [msi_x64](https://nodejs.org/dist/v5.5.0/node-v5.5.0-x64.msi) + [msi_x86](https://nodejs.org/dist/v5.5.0/node-v5.5.0-x86.msi) - NVM（Node Version Manager） - nvm(node version manager) - 因为node版本比较多，开发人员可能依赖很多版本 - 通过NVM，可以轻松切换于不同的版本之间 下载nvm-setup,下一步就行,自动配置nvm所需的环境变量 要想使用npm,就要手动配置npm所需的环境变量了 NPM_HOME=C:\Develop\nvm\npm PATH=%NPM_HOME% ##### 检测Node环境搭建是否成功 nvm ##### 列出node版本 nvm ls ##### 切换版本 nvm use 4.3.1 ##### 列出目录 ls 如:nvm ls npm ls ###(上午的视频就是介绍node,配置node环境(装nvm)) 1.3.Node用途- 做动态网站 - 开发提供数据的服务端API 1.4.NPM1.4.1.什么是NPM 个人理解npm,gulp,browser-sync都像Java中的一个类,是可执行文件,所以才要引包,不过都需要编译器而已,他们和.exe文件一样都是可执行文件,也都需要编译器翻译成机器语言. npm发展史:#https://zhuanlan.zhihu.com/p/24357770 1.4.2.常见的NPM操作// 安装一个包，默认安装最新稳定版本 npm install package_name // --save(配置文件所依赖的如bootstrap被删除了,不要紧,自动去下载 npm install bootstrap --save) // --save-dev(开发阶段,配置文件所依赖的如bootstrap被删除了,不要紧,自动去下载 npm install bootstrap --save-dev),发布之后不依赖. // 初始化操作，给项目添加一个配置文件 npm init // --yes参数走默认配置 npm操作大全:http://www.jianshu.com/p/4643a8e43b79 - 如果官方数据源太慢使用 - https://npm.taobao.org/ ***** 3.Gulp4.1.Gulp简介什么叫gulphttp://blog.csdn.net/xllily_11/article/details/51320002http://blog.csdn.net/xllily_11/article/details/51393569 链接： 官网 中文网 就是用来机械化的完成重复性质的工作 gulp的机制就是将重复工作抽象成一个个的任务， 4.2.Gulp准备工作 安装Node.js 安装 gulp 命令行工具 npm install -g gulp 创建package.json(npm init –yes) 创建任务 - gulpfile.js 4.3.基本使用var gulp =require(&apos;gulp&apos;); var less=require(&apos;gulp-less&apos;); var gulp_csso=require(&apos;gulp-csso&apos;); var browserSync=require(&apos;browser-sync&apos;).create(); gulp.task(&quot;copy&quot;,function(){ // console.log(&quot;你好,gulp&quot;); gulp.src(&quot;src/index.html&quot;) .pipe(gulp.dest(&quot;dist/&quot;)); }); gulp.task(&quot;css&quot;,function(){ gulp.src(&quot;src/css/index.less&quot;) .pipe(less()) .pipe(gulp_csso()) .pipe(gulp.dest(&quot;dist/&quot;)) }) gulp.task(&quot;dist&quot;,function(){ gulp.watch(&quot;src/index.html&quot;,[&quot;copy&quot;]); gulp.watch(&quot;src/css/index.less&quot;,[&quot;css&quot;]) }) gulp.task(&quot;browser&quot;,function(){ browserSync.init({ server:{ baseDir:&quot;./&quot; } }) }) Less语法:@primary-color: #e9232c; body{ background-color: @primary-color; .container{ width: 1280px; .row{ padding: 0 45px; } } } 4.4.常用插件 编译 Less：gulp-less 创建本地服务器：gulp-connect 合并文件：gulp-concat 最小化 js 文件：gulp-uglify 重命名文件：gulp-rename 最小化 css 文件：gulp-minify-css 压缩html文件 gulp-minify-html 最小化图像：gulp-imagemin 5.Git5.1.什么是GIT，什么是GITHUB GIT GITHUB 5.2.环境安装5.3.GIT常用命令 6.Markdownhttps://guides.github.com/features/mastering-markdown/https://help.github.com/articles/github-flavored-markdown/https://help.github.com/articles/markdown-basics/]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git入门]]></title>
    <url>%2F2016%2F11%2F09%2Fangular%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[流行框架第二天：Git与Angular入门- NPM + node pacwkage manager(node的包管理工具) + npm管理包非常方便，我们只需要记住使用哪个包就可以了 + 使用 - npm install xxx (这个就能下载包下来,但是把包删了后就能重新输入命令下载) - 安装完成过后项目根目录下会多一个node_modules文件夹，所有的下载下来的包全部在里面 - 由于需要记录项目依赖哪些东西，所以需要一个配置文件“package.json”，可以通过npm init命令生成(这些记录的文件,就算删除了,但是初始化node项目(npm install),读取package.json,这些包就会自动下载,而不需一个一个包 npm install xxx一下) - 以后安装包的时候将其--save - --save就是将我们安装的包名字和包版本记录到配置文件中的dependencies节点中 - --save-dev - 项目依赖分两种，一个就是普通的项目依赖比如bootstrap，还用一种只是开发阶段需要用的，这种属于开发依赖比如gulp，开发依赖最终记录在devDependencies节点里面 - npm uninstall xxx --save - npm install xxx -g(全局安装包) + 如果你安装的是一个工具，工具要在每一个地方都能用，这种情况下一般全局安装。 - Bower + Web sites are made of lots of things — frameworks, libraries, assets, and utilities. Bower manages all these things for you. + Bower就是用来管理项目中所有的依赖，主要用于Web页面开发时使用的包管理，比如jquery，bootstrap + &gt; 重复的轮子太多，抓住轮子与轮子之间的共性 &gt; - msi - microsoft installer 微软安装器 什么是GIT- 是一个源代码管理工具 - 在一个项目中，凡是由开发人员编写的都算是源代码 - 源代码有必要管理起来？ - 让源代码可以被追溯，主要记录每次变更了什么，谁主导这次变化 - 人为的维护比较麻烦，(而那些分支你可以皇族正统与分支) - GIT是Linux之父当年为了维护管理Linux的源代码写的一个工具 - Git 之前 很多使用 svn vss tfs hs ...... - git命令行工具 - 基于git命令行的一个客户端软件（提供一个界面去管理源代码）SourceTreeSetup GIT命令操作- 初始化一个本地GIT仓储 cd 当前项目目录 git init // 初始化一个本地的仓库 &gt; 就是在本地文件夹中添加了一个.git的文件夹用于记录所有的项目变更信息 - 查看本地仓储的变更状态 git status(用来比较管理的代码与现在的代码区别) 第一次查看，显示的是一坨没有被跟踪的文件 git status -s // -s 是输出简要的变更日志 - 添加本地暂存（托管）文件 git add(添加给档案室整理) 可以将一个没有被跟踪的文件添加到跟踪列表 类似于node_modules这种性质的文件是不应该被跟踪 - 添加本地GIT忽略清单文件 在代码库文件夹的根目录添加一个.gitignore文件 此文件用于说明忽略的文件有哪些 - 提交被托管的文件变化到本地仓储 git commit(确认无误之后放到档案架) 将本地的变化提交的本地的仓库文件夹归档 一般在有了一个小单元的整体变化后再提交 - 对比差异 git diff 可以用于对比当前状态和版本库中状态的变化 - 提交日志 git log 可以查看提交日志 - 回归到指定版本 git reset --hard GITHUB基本使用- https://github.com/ - GITHUB是一个GIT服务的服务器 - - 提出社交化编程 http://zoomzhao.github.io/code-guide/ https://github.com/jobbole/awesome-javascript-cn https://github.com/jobbole/awesome-css-cn 主要要学会上传静态网页,动态网页是不能运行的. 你自己有百度资料 hexo工具只要装了nodejs与npm就能自己看文档使用]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
