<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LogBlog</title>
  
  <subtitle>日志博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://2744624215.github.io/Blog/"/>
  <updated>2017-10-03T06:29:56.015Z</updated>
  <id>https://2744624215.github.io/Blog/</id>
  
  <author>
    <name>刘斌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node介绍</title>
    <link href="https://2744624215.github.io/Blog/2016/11/09/angular%E7%AC%AC%E4%B8%80%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
    <id>https://2744624215.github.io/Blog/2016/11/09/angular第一天笔记/</id>
    <published>2016-11-08T16:00:00.000Z</published>
    <updated>2017-10-03T06:29:56.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Node环境"><a href="#1-Node环境" class="headerlink" title="1.Node环境"></a>1.Node环境</h2><h3 id="1-1-什么是Node"><a href="#1-1-什么是Node" class="headerlink" title="1.1.什么是Node"></a>1.1.什么是Node</h3><ul><li>Node.js 可能类似jquery.js</li><li>不是JS文件，也不是一个JS框架（）</li><li>而是Server side Javascript runtime, 服务端的一个JS运行时</li><li>我们可以在NODE运行JS代码</li><li>alert();ECMAScript  JS- ES  BOM  DOM</li><li>node中只能运行ECMAScript，无法使用 BOM 和 DOM</li><li>目前我们的JS是运行在浏览器内核中</li><li>PHP是什么？是一门脚本语言也是一个运行环境</li><li><p>为什么Node选中了JS，</p></li><li><p>说到底就是一个JS运行环境</p><a id="more"></a></li><li>目前有两个分支<ul><li>Node.js 0.12.7 官方版本 要求尽善尽美</li><li>IO.js 是社区的产物，不是官方的东西，io.js有很多新特性，迭代非常快，社区推进非常快</li><li>15年两者合并，发布node第一个正式版 4.0， 迭代速度又慢了</li><li>node 5.x == io.js</li><li>node 4.0 == node</li></ul></li></ul><h3 id="1-2-Node环境搭建"><a href="#1-2-Node环境搭建" class="headerlink" title="1.2.Node环境搭建"></a>1.2.Node环境搭建</h3><h4 id="1-2-1-Mac"><a href="#1-2-1-Mac" class="headerlink" title="1.2.1.Mac"></a>1.2.1.Mac</h4><pre><code>- 安装包的方式  + [pkg](https://nodejs.org/dist/v5.5.0/node-v5.5.0.pkg)- NVM（Node Version Manager）  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash</div><div class="line">$ <span class="built_in">echo</span> <span class="string">'. ~/.nvm/nvm.sh'</span> &gt;&gt; .bash_profile</div><div class="line">$ nvm install stable</div><div class="line">$ nvm <span class="built_in">alias</span> default stable</div></pre></td></tr></table></figure></code></pre><h4 id="1-2-2-Windows"><a href="#1-2-2-Windows" class="headerlink" title="1.2.2.Windows"></a>1.2.2.Windows</h4><pre><code>- 安装包的方式  + [msi_x64](https://nodejs.org/dist/v5.5.0/node-v5.5.0-x64.msi)  + [msi_x86](https://nodejs.org/dist/v5.5.0/node-v5.5.0-x86.msi)- NVM（Node Version Manager）- nvm(node version manager)- 因为node版本比较多，开发人员可能依赖很多版本- 通过NVM，可以轻松切换于不同的版本之间    下载nvm-setup,下一步就行,自动配置nvm所需的环境变量    要想使用npm,就要手动配置npm所需的环境变量了    NPM_HOME=C:\Develop\nvm\npm    PATH=%NPM_HOME%    ##### 检测Node环境搭建是否成功        nvm    ##### 列出node版本        nvm ls    ##### 切换版本        nvm use 4.3.1    ##### 列出目录        ls        如:nvm ls           npm ls</code></pre><p>###(上午的视频就是介绍node,配置node环境(装nvm))</p><h3 id="1-3-Node用途"><a href="#1-3-Node用途" class="headerlink" title="1.3.Node用途"></a>1.3.Node用途</h3><pre><code>- 做动态网站- 开发提供数据的服务端API</code></pre><h3 id="1-4-NPM"><a href="#1-4-NPM" class="headerlink" title="1.4.NPM"></a>1.4.NPM</h3><h4 id="1-4-1-什么是NPM"><a href="#1-4-1-什么是NPM" class="headerlink" title="1.4.1.什么是NPM"></a>1.4.1.什么是NPM</h4><blockquote><p>个人理解<br>npm,gulp,browser-sync都像Java中的一个类,是可执行文件,所以才要引包,不过都需要编译器而已,他们和.exe文件一样都是可执行文件,也都需要编译器翻译成机器语言.</p></blockquote><h1 id="npm发展史"><a href="#npm发展史" class="headerlink" title="npm发展史:"></a>npm发展史:</h1><p>#<a href="https://zhuanlan.zhihu.com/p/24357770" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/24357770</a></p><h4 id="1-4-2-常见的NPM操作"><a href="#1-4-2-常见的NPM操作" class="headerlink" title="1.4.2.常见的NPM操作"></a>1.4.2.常见的NPM操作</h4><pre><code>// 安装一个包，默认安装最新稳定版本npm install package_name// --save(配置文件所依赖的如bootstrap被删除了,不要紧,自动去下载 npm install bootstrap --save)// --save-dev(开发阶段,配置文件所依赖的如bootstrap被删除了,不要紧,自动去下载 npm install bootstrap --save-dev),发布之后不依赖.// 初始化操作，给项目添加一个配置文件npm init // --yes参数走默认配置npm操作大全:http://www.jianshu.com/p/4643a8e43b79- 如果官方数据源太慢使用- https://npm.taobao.org/*****</code></pre><h2 id="3-Gulp"><a href="#3-Gulp" class="headerlink" title="3.Gulp"></a>3.Gulp</h2><h3 id="4-1-Gulp简介"><a href="#4-1-Gulp简介" class="headerlink" title="4.1.Gulp简介"></a>4.1.Gulp简介</h3><h1 id="什么叫gulp"><a href="#什么叫gulp" class="headerlink" title="什么叫gulp"></a>什么叫gulp</h1><h2 id="http-blog-csdn-net-xllily-11-article-details-51320002"><a href="#http-blog-csdn-net-xllily-11-article-details-51320002" class="headerlink" title="http://blog.csdn.net/xllily_11/article/details/51320002"></a><a href="http://blog.csdn.net/xllily_11/article/details/51320002" target="_blank" rel="external">http://blog.csdn.net/xllily_11/article/details/51320002</a></h2><h2 id="http-blog-csdn-net-xllily-11-article-details-51393569"><a href="#http-blog-csdn-net-xllily-11-article-details-51393569" class="headerlink" title="http://blog.csdn.net/xllily_11/article/details/51393569"></a><a href="http://blog.csdn.net/xllily_11/article/details/51393569" target="_blank" rel="external">http://blog.csdn.net/xllily_11/article/details/51393569</a></h2><ul><li>链接：<ul><li><a href="http://gulpjs.com/" target="_blank" rel="external">官网</a></li><li><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">中文网</a></li></ul></li><li>就是用来机械化的完成重复性质的工作</li><li>gulp的机制就是将重复工作抽象成一个个的任务，</li></ul><h3 id="4-2-Gulp准备工作"><a href="#4-2-Gulp准备工作" class="headerlink" title="4.2.Gulp准备工作"></a>4.2.Gulp准备工作</h3><ul><li>安装Node.js</li><li>安装 gulp 命令行工具<ul><li><code>npm install -g gulp</code></li></ul></li><li>创建package.json(npm init –yes)</li><li>创建任务 - gulpfile.js</li></ul><h3 id="4-3-基本使用"><a href="#4-3-基本使用" class="headerlink" title="4.3.基本使用"></a>4.3.基本使用</h3><pre><code>var gulp =require(&apos;gulp&apos;);var less=require(&apos;gulp-less&apos;);var gulp_csso=require(&apos;gulp-csso&apos;);var browserSync=require(&apos;browser-sync&apos;).create();gulp.task(&quot;copy&quot;,function(){    // console.log(&quot;你好,gulp&quot;);    gulp.src(&quot;src/index.html&quot;)    .pipe(gulp.dest(&quot;dist/&quot;));});gulp.task(&quot;css&quot;,function(){    gulp.src(&quot;src/css/index.less&quot;)    .pipe(less())    .pipe(gulp_csso())    .pipe(gulp.dest(&quot;dist/&quot;))})gulp.task(&quot;dist&quot;,function(){    gulp.watch(&quot;src/index.html&quot;,[&quot;copy&quot;]);    gulp.watch(&quot;src/css/index.less&quot;,[&quot;css&quot;])})gulp.task(&quot;browser&quot;,function(){    browserSync.init({        server:{            baseDir:&quot;./&quot;        }    })})</code></pre><h2 id="Less语法"><a href="#Less语法" class="headerlink" title="Less语法:"></a>Less语法:</h2><pre><code>@primary-color: #e9232c;body{  background-color: @primary-color;  .container{width: 1280px;.row{  padding: 0 45px;}  }}</code></pre><h3 id="4-4-常用插件"><a href="#4-4-常用插件" class="headerlink" title="4.4.常用插件"></a>4.4.常用插件</h3><ul><li><a href="https://www.npmjs.com/package/gulp-less" target="_blank" rel="external">编译 Less：gulp-less</a></li><li><a href="https://www.npmjs.com/package/gulp-connect" target="_blank" rel="external">创建本地服务器：gulp-connect</a></li><li><a href="https://www.npmjs.com/package/gulp-concat" target="_blank" rel="external">合并文件：gulp-concat</a></li><li><a href="https://www.npmjs.com/package/gulp-uglify" target="_blank" rel="external">最小化 js 文件：gulp-uglify</a></li><li><a href="https://www.npmjs.com/package/gulp-rename" target="_blank" rel="external">重命名文件：gulp-rename</a></li><li><a href="https://www.npmjs.com/package/gulp-minify-css" target="_blank" rel="external">最小化 css 文件：gulp-minify-css</a></li><li><a href="https://www.npmjs.com/package/gulp-minify-html" target="_blank" rel="external">压缩html文件 gulp-minify-html</a></li><li><a href="https://www.npmjs.com/package/gulp-imagemin" target="_blank" rel="external">最小化图像：gulp-imagemin</a></li></ul><hr><h2 id="5-Git"><a href="#5-Git" class="headerlink" title="5.Git"></a>5.Git</h2><h3 id="5-1-什么是GIT，什么是GITHUB"><a href="#5-1-什么是GIT，什么是GITHUB" class="headerlink" title="5.1.什么是GIT，什么是GITHUB"></a>5.1.什么是GIT，什么是GITHUB</h3><ul><li>GIT</li><li>GITHUB</li></ul><h3 id="5-2-环境安装"><a href="#5-2-环境安装" class="headerlink" title="5.2.环境安装"></a>5.2.环境安装</h3><h3 id="5-3-GIT常用命令"><a href="#5-3-GIT常用命令" class="headerlink" title="5.3.GIT常用命令"></a>5.3.GIT常用命令</h3><hr><h2 id="6-Markdown"><a href="#6-Markdown" class="headerlink" title="6.Markdown"></a>6.Markdown</h2><p><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="external">https://guides.github.com/features/mastering-markdown/</a><br><a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="external">https://help.github.com/articles/github-flavored-markdown/</a><br><a href="https://help.github.com/articles/markdown-basics/" target="_blank" rel="external">https://help.github.com/articles/markdown-basics/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Node环境&quot;&gt;&lt;a href=&quot;#1-Node环境&quot; class=&quot;headerlink&quot; title=&quot;1.Node环境&quot;&gt;&lt;/a&gt;1.Node环境&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是Node&quot;&gt;&lt;a href=&quot;#1-1-什么是Node&quot; class=&quot;headerlink&quot; title=&quot;1.1.什么是Node&quot;&gt;&lt;/a&gt;1.1.什么是Node&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Node.js 可能类似jquery.js&lt;/li&gt;
&lt;li&gt;不是JS文件，也不是一个JS框架（）&lt;/li&gt;
&lt;li&gt;而是Server side Javascript runtime, 服务端的一个JS运行时&lt;/li&gt;
&lt;li&gt;我们可以在NODE运行JS代码&lt;/li&gt;
&lt;li&gt;alert();ECMAScript  JS- ES  BOM  DOM&lt;/li&gt;
&lt;li&gt;node中只能运行ECMAScript，无法使用 BOM 和 DOM&lt;/li&gt;
&lt;li&gt;目前我们的JS是运行在浏览器内核中&lt;/li&gt;
&lt;li&gt;PHP是什么？是一门脚本语言也是一个运行环境&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为什么Node选中了JS，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;说到底就是一个JS运行环境&lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="https://2744624215.github.io/Blog/categories/Node/"/>
    
    
      <category term="npm" scheme="https://2744624215.github.io/Blog/tags/npm/"/>
    
      <category term="hexo" scheme="https://2744624215.github.io/Blog/tags/hexo/"/>
    
      <category term="github" scheme="https://2744624215.github.io/Blog/tags/github/"/>
    
      <category term="Node" scheme="https://2744624215.github.io/Blog/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Git入门</title>
    <link href="https://2744624215.github.io/Blog/2016/11/09/angular%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
    <id>https://2744624215.github.io/Blog/2016/11/09/angular第二天笔记/</id>
    <published>2016-11-08T16:00:00.000Z</published>
    <updated>2017-10-03T06:29:51.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流行框架第二天：Git与Angular入门"><a href="#流行框架第二天：Git与Angular入门" class="headerlink" title="流行框架第二天：Git与Angular入门"></a>流行框架第二天：Git与Angular入门</h1><pre><code>- NPM   + node pacwkage manager(node的包管理工具)  + npm管理包非常方便，我们只需要记住使用哪个包就可以了  + 使用- npm install xxx (这个就能下载包下来,但是把包删了后就能重新输入命令下载)- 安装完成过后项目根目录下会多一个node_modules文件夹，所有的下载下来的包全部在里面- 由于需要记录项目依赖哪些东西，所以需要一个配置文件“package.json”，可以通过npm init命令生成(这些记录的文件,就算删除了,但是初始化node项目(npm install),读取package.json,这些包就会自动下载,而不需一个一个包 npm install xxx一下)- 以后安装包的时候将其--save- --save就是将我们安装的包名字和包版本记录到配置文件中的dependencies节点中- --save-dev- 项目依赖分两种，一个就是普通的项目依赖比如bootstrap，还用一种只是开发阶段需要用的，这种属于开发依赖比如gulp，开发依赖最终记录在devDependencies节点里面</code></pre><a id="more"></a>    <pre><code>- npm uninstall xxx --save- npm install xxx -g(全局安装包)  + 如果你安装的是一个工具，工具要在每一个地方都能用，这种情况下一般全局安装。- Bower  + Web sites are made of lots of things — frameworks, libraries, assets, and utilities. Bower manages all these things for you.  + Bower就是用来管理项目中所有的依赖，主要用于Web页面开发时使用的包管理，比如jquery，bootstrap  +   &gt; 重复的轮子太多，抓住轮子与轮子之间的共性  &gt; - msi - microsoft installer 微软安装器</code></pre><h1 id="什么是GIT"><a href="#什么是GIT" class="headerlink" title="什么是GIT"></a>什么是GIT</h1><pre><code>- 是一个源代码管理工具- 在一个项目中，凡是由开发人员编写的都算是源代码- 源代码有必要管理起来？- 让源代码可以被追溯，主要记录每次变更了什么，谁主导这次变化- 人为的维护比较麻烦，(而那些分支你可以皇族正统与分支)- GIT是Linux之父当年为了维护管理Linux的源代码写的一个工具- Git 之前 很多使用 svn vss tfs hs ......- git命令行工具</code></pre><p><img src="D:\Web\13 主流框架\13主流框架\12.主流框架\02 第二天git的介绍及使用 01-27\2016-01-27\git\git-guide.jpg" title="git-guide"></p><pre><code>- 基于git命令行的一个客户端软件（提供一个界面去管理源代码）SourceTreeSetup</code></pre><h1 id="GIT命令操作"><a href="#GIT命令操作" class="headerlink" title="GIT命令操作"></a>GIT命令操作</h1><pre><code>- 初始化一个本地GIT仓储cd 当前项目目录git init // 初始化一个本地的仓库&gt; 就是在本地文件夹中添加了一个.git的文件夹用于记录所有的项目变更信息- 查看本地仓储的变更状态git status(用来比较管理的代码与现在的代码区别)第一次查看，显示的是一坨没有被跟踪的文件git status -s // -s 是输出简要的变更日志- 添加本地暂存（托管）文件git add(添加给档案室整理)可以将一个没有被跟踪的文件添加到跟踪列表类似于node_modules这种性质的文件是不应该被跟踪- 添加本地GIT忽略清单文件在代码库文件夹的根目录添加一个.gitignore文件此文件用于说明忽略的文件有哪些- 提交被托管的文件变化到本地仓储git commit(确认无误之后放到档案架)将本地的变化提交的本地的仓库文件夹归档一般在有了一个小单元的整体变化后再提交- 对比差异git diff可以用于对比当前状态和版本库中状态的变化- 提交日志git log 可以查看提交日志- 回归到指定版本git reset --hard</code></pre><h1 id="GITHUB基本使用"><a href="#GITHUB基本使用" class="headerlink" title="GITHUB基本使用"></a>GITHUB基本使用</h1><pre><code>- https://github.com/- GITHUB是一个GIT服务的服务器- - 提出社交化编程http://zoomzhao.github.io/code-guide/https://github.com/jobbole/awesome-javascript-cnhttps://github.com/jobbole/awesome-css-cn主要要学会上传静态网页,动态网页是不能运行的.你自己有百度资料</code></pre><h1 id="hexo工具"><a href="#hexo工具" class="headerlink" title="hexo工具"></a>hexo工具</h1><pre><code>只要装了nodejs与npm就能自己看文档使用</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;流行框架第二天：Git与Angular入门&quot;&gt;&lt;a href=&quot;#流行框架第二天：Git与Angular入门&quot; class=&quot;headerlink&quot; title=&quot;流行框架第二天：Git与Angular入门&quot;&gt;&lt;/a&gt;流行框架第二天：Git与Angular入门&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- NPM 
  + node pacwkage manager(node的包管理工具)
  + npm管理包非常方便，我们只需要记住使用哪个包就可以了
  + 使用
- npm install xxx (这个就能下载包下来,但是把包删了后就能重新输入命令下载)
- 安装完成过后项目根目录下会多一个node_modules文件夹，所有的下载下来的包全部在里面

- 由于需要记录项目依赖哪些东西，所以需要一个配置文件“package.json”，可以通过npm init命令生成(这些记录的文件,就算删除了,但是初始化node项目(npm install),读取package.json,这些包就会自动下载,而不需一个一个包 npm install xxx一下)
- 以后安装包的时候将其--save

- --save就是将我们安装的包名字和包版本记录到配置文件中的dependencies节点中
- --save-dev
- 项目依赖分两种，一个就是普通的项目依赖比如bootstrap，还用一种只是开发阶段需要用的，这种属于开发依赖比如gulp，开发依赖最终记录在devDependencies节点里面
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Git" scheme="https://2744624215.github.io/Blog/categories/Git/"/>
    
    
      <category term="npm" scheme="https://2744624215.github.io/Blog/tags/npm/"/>
    
      <category term="hexo" scheme="https://2744624215.github.io/Blog/tags/hexo/"/>
    
      <category term="github" scheme="https://2744624215.github.io/Blog/tags/github/"/>
    
  </entry>
  
</feed>
